// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"github.com/zhoushuguang/lebron/apps/user/rpc/internal/logic"
	"github.com/zhoushuguang/lebron/apps/user/rpc/internal/svc"
	"github.com/zhoushuguang/lebron/apps/user/rpc/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

//  登录
func (s *UserServer) Login(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

//  获取用户信息
func (s *UserServer) UserInfo(ctx context.Context, in *user.UserInfoRequest) (*user.UserInfoResponse, error) {
	l := logic.NewUserInfoLogic(ctx, s.svcCtx)
	return l.UserInfo(in)
}

//  添加收获地址
func (s *UserServer) AddUserReceiveAddress(ctx context.Context, in *user.UserReceiveAddressAddReq) (*user.UserReceiveAddressAddRes, error) {
	l := logic.NewAddUserReceiveAddressLogic(ctx, s.svcCtx)
	return l.AddUserReceiveAddress(in)
}

//  编辑收获地址
func (s *UserServer) EditUserReceiveAddress(ctx context.Context, in *user.UserReceiveAddressEditReq) (*user.UserReceiveAddressEditRes, error) {
	l := logic.NewEditUserReceiveAddressLogic(ctx, s.svcCtx)
	return l.EditUserReceiveAddress(in)
}

//  删除收获地址
func (s *UserServer) DelUserReceiveAddress(ctx context.Context, in *user.UserReceiveAddressDelReq) (*user.UserReceiveAddressDelRes, error) {
	l := logic.NewDelUserReceiveAddressLogic(ctx, s.svcCtx)
	return l.DelUserReceiveAddress(in)
}

//  获取收获地址列表
func (s *UserServer) GetUserReceiveAddressList(ctx context.Context, in *user.UserReceiveAddressListReq) (*user.UserReceiveAddressListRes, error) {
	l := logic.NewGetUserReceiveAddressListLogic(ctx, s.svcCtx)
	return l.GetUserReceiveAddressList(in)
}

//  添加收藏
func (s *UserServer) AddCollection(ctx context.Context, in *user.CollectionAddReq) (*user.CollectionAddRes, error) {
	l := logic.NewAddCollectionLogic(ctx, s.svcCtx)
	return l.AddCollection(in)
}
